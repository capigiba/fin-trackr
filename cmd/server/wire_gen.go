// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	transaction3 "fintrack/internal/handler/rest/v1/transaction"
	user3 "fintrack/internal/handler/rest/v1/user"
	"fintrack/internal/infra/db"
	"fintrack/internal/pkg/middleware"
	"fintrack/internal/repo/transaction"
	"fintrack/internal/repo/user"
	"fintrack/internal/router"
	"fintrack/internal/service"
	"fintrack/internal/service/auth"
	transaction2 "fintrack/internal/service/transaction"
	user2 "fintrack/internal/service/user"
)

// Injectors from wire.go:

// InitializeApp wires dependencies using Wire and should not have manual code.
func InitializeApp() (*router.AppRouter, error) {
	sqlDB, err := db.InitializeDB()
	if err != nil {
		return nil, err
	}
	userRepository := user.NewUserRepo(sqlDB)
	string2 := _wireStringValue
	authService := auth.NewAuthService(userRepository, string2)
	userService := user2.NewUserService(userRepository, authService)
	userHandler := user3.NewUserHandler(userService)
	transactionRepository := transaction.NewTransactionRepository(sqlDB)
	transactionService := transaction2.NewTransactionService(transactionRepository)
	transactionHandler := transaction3.NewTransactionHandler(transactionService)
	authUserMiddleware := middleware.NewAuthUserMiddleware(authService)
	swaggerRouter := router.NewSwaggerRouter()
	appRouter := router.NewAppRouter(userHandler, transactionHandler, authUserMiddleware, swaggerRouter)
	return appRouter, nil
}

var (
	_wireStringValue = service.SecretKey
)
